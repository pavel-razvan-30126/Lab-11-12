Index: c4-samples/src/main/java/aut/utcluj/isp/ex4/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package aut.utcluj.isp.ex4;\r\n\r\nimport javax.jws.soap.SOAPBinding;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author stefan\r\n */\r\npublic class User {\r\n    private UserCart userCart;\r\n    private Double userMoney;\r\n\r\n    public User(Double userMoney) {\r\n        this.userMoney = userMoney;\r\n        userCart = new UserCart();\r\n    }\r\n\r\n    public UserCart getUserCart() {\r\n        return userCart;\r\n    }\r\n\r\n    public Double getUserMoney() {\r\n        return userMoney;\r\n    }\r\n\r\n    public void setUserCart(UserCart userCart) {\r\n        this.userCart = userCart;\r\n    }\r\n\r\n    public void setUserMoney(Double userMoney) {\r\n        this.userMoney = userMoney;\r\n    }\r\n\r\n    /**\r\n     * Add product to the cart\r\n     *\r\n     * @param product  - product to be added\r\n     * @param quantity - quantity to be added\r\n     */\r\n    public void addProductToCart(Product product, int quantity) {\r\n        userCart.addProductToCart(product, quantity);\r\n    }\r\n\r\n    /**\r\n     * Remove product from cart\r\n     * An {@link ProductNotFoundException} exception should be thrown if no product with desired productId is found\r\n     *\r\n     * @param productId - unique product id\r\n     */\r\n    public void removeProductFromCart(final String productId) {\r\n\r\n        userCart.removeProductFromCart(productId);\r\n    }\r\n\r\n\r\n//   public void tryRemovingProduct(final String productID) throws ProductNotFoundException {\r\n//       /* boolean found = false;\r\n//        for (Product product : userCart.getCardProducts()) {\r\n//            if (product.getProductId().equals(productID)) {\r\n//                userCart.removeProductFromCart(productID);\r\n//                found = true;\r\n//            }\r\n//        }\r\n//        if (!found) {\r\n//            throw new ProductNotFoundException();\r\n//        }*/\r\n//       {\r\n//           userCart.removeProductFromCart(productID);\r\n//       }\r\n//    }\r\n\r\n\r\n    /**\r\n     * Submit cart details\r\n     * Total price of the products should be extracted from userMoney\r\n     * If userMoney is less than total price of the products, an {@link NotEnoughMoneyException} exception will be thrown\r\n     * If userMoney is greater or equal to the total price of the products, total price should be extracted from total money and cart to be reset to default values\r\n     */\r\n    public void submitCart() {\r\n        try {\r\n            removeMoney();\r\n        } catch (NotEnoughMoneyException e) {\r\n            System.out.println(\"Not enough money\");\r\n        }\r\n    }\r\n\r\n    public void removeMoney() throws NotEnoughMoneyException {\r\n        if (userMoney < userCart.getTotalPrice()) {\r\n            throw new NotEnoughMoneyException();\r\n        } else {\r\n            userMoney -= userCart.getTotalPrice();\r\n            userCart.resetCart();\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- c4-samples/src/main/java/aut/utcluj/isp/ex4/User.java	(revision 04ecce6cfecf2e723bc23c6436371351a63af691)
+++ c4-samples/src/main/java/aut/utcluj/isp/ex4/User.java	(date 1589983147952)
@@ -93,5 +93,4 @@
             userCart.resetCart();
         }
     }
-}
-
+}
\ No newline at end of file
Index: c4-samples/src/test/java/aut/utcluj/isp/ex4/UserCartTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package aut.utcluj.isp.ex4;\r\n\r\nimport org.junit.Test;\r\n\r\nimport java.util.List;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\n/**\r\n * @author stefan\r\n */\r\npublic class UserCartTest {\r\n    @Test\r\n    public void testCreate() {\r\n        final UserCart userCart = new UserCart();\r\n        assertNotNull(\"Cart details should not be null\", userCart.getCardProducts());\r\n        assertEquals(\"Default total price should be 0\", 0, userCart.getTotalPrice(), 0);\r\n    }\r\n\r\n    @Test\r\n    public void testAddProductToCart() {\r\n        final Product product = new Product(\"p_1\", 100d);\r\n        final UserCart userCart = new UserCart();\r\n        userCart.addProductToCart(product, 2);\r\n\r\n        assertEquals(\"Cart size should be 2\", 2, userCart.getCardProducts().size());\r\n        assertEquals(\"Total price should be 200\", 200d, userCart.getTotalPrice(), 0);\r\n    }\r\n\r\n    @Test\r\n    public void testRemoveProductFromCart() {\r\n        final Product firstProduct = new Product(\"p_1\", 100d);\r\n        final Product secondProduct = new Product(\"p_2\", 200d);\r\n        final UserCart userCart = new UserCart();\r\n        userCart.addProductToCart(firstProduct, 2);\r\n        userCart.addProductToCart(secondProduct, 2);\r\n\r\n        final List<Product> productsBeforeRemove = userCart.getCardProducts();\r\n        assertEquals(\"Cart size should be 4\", 4, productsBeforeRemove.size());\r\n        userCart.removeProductFromCart(\"p_2\");\r\n        final List<Product> productsAfterRemove = userCart.getCardProducts();\r\n        assertEquals(\"Cart size should be 3\", 3, productsAfterRemove.size());\r\n        assertEquals(\"First product should have p_1 id\", \"p_1\", productsAfterRemove.get(0).getProductId());\r\n        assertEquals(\"Second product should have p_1 id\", \"p_1\", productsAfterRemove.get(1).getProductId());\r\n        assertEquals(\"Third product should have p_2 id\", \"p_2\", productsAfterRemove.get(2).getProductId());\r\n        assertEquals(\"Total price should be 400\", 400d, userCart.getTotalPrice(), 0);\r\n    }\r\n\r\n    @Test(expected = ProductNotFoundException.class)\r\n    public void testRemoveProductFromCartThrowsExceptionWhenNoProductFound() throws ProductNotFoundException{\r\n        final UserCart userCart = new UserCart();\r\n        userCart.removeProductFromCart(\"p_1\");\r\n    }\r\n\r\n    @Test\r\n    public void testGetCartDetails() {\r\n        final Product firstProduct = new Product(\"p_1\", 100d);\r\n        final Product secondProduct = new Product(\"p_2\", 200d);\r\n        final UserCart userCart = new UserCart();\r\n        userCart.addProductToCart(firstProduct, 2);\r\n        userCart.addProductToCart(secondProduct, 1);\r\n\r\n        try {\r\n            final String expectedResult = \"Product id: p_1, Items: 2\\n\" +\r\n                    \"Product id: p_2, Items: 1\\n\" +\r\n                    \"Total price: 400.0\";\r\n            final String cartDetails = ((ICartDetails)userCart).getCartDetails();\r\n            assertNotNull(\"Cart details should not be null\", cartDetails);\r\n            assertEquals(\"Cart details should be the same\", expectedResult, cartDetails);\r\n        } catch (ClassCastException ex) {\r\n            fail(\"Show not fail on casting UserCart instance to ICartDetails\");\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testResetCart() {\r\n        final Product product = new Product(\"p_1\", 100d);\r\n        final UserCart userCart = new UserCart();\r\n        userCart.addProductToCart(product, 2);\r\n\r\n        final List<Product> productsBeforeReset = userCart.getCardProducts();\r\n        assertEquals(\"2 products in cart\", 2, productsBeforeReset.size());\r\n        assertEquals(\"Total price is 200\", 200d, userCart.getTotalPrice(), 0);\r\n\r\n        userCart.resetCart();\r\n\r\n        final List<Product> productsAfterReset = userCart.getCardProducts();\r\n        assertEquals(\"0 products in cart\", 0, productsAfterReset.size());\r\n        assertEquals(\"Total price is 0\", 0, userCart.getTotalPrice(), 0);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- c4-samples/src/test/java/aut/utcluj/isp/ex4/UserCartTest.java	(revision 04ecce6cfecf2e723bc23c6436371351a63af691)
+++ c4-samples/src/test/java/aut/utcluj/isp/ex4/UserCartTest.java	(date 1589984409844)
@@ -28,7 +28,7 @@
     }
 
     @Test
-    public void testRemoveProductFromCart() {
+    public void testRemoveProductFromCart(){
         final Product firstProduct = new Product("p_1", 100d);
         final Product secondProduct = new Product("p_2", 200d);
         final UserCart userCart = new UserCart();
@@ -47,7 +47,7 @@
     }
 
     @Test(expected = ProductNotFoundException.class)
-    public void testRemoveProductFromCartThrowsExceptionWhenNoProductFound() throws ProductNotFoundException{
+    public void testRemoveProductFromCartThrowsExceptionWhenNoProductFound(){
         final UserCart userCart = new UserCart();
         userCart.removeProductFromCart("p_1");
     }
Index: c4-samples/src/main/java/aut/utcluj/isp/ex4/ProductNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package aut.utcluj.isp.ex4;\r\n\r\n/**\r\n * @author stefan\r\n */\r\npublic class ProductNotFoundException extends Exception {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- c4-samples/src/main/java/aut/utcluj/isp/ex4/ProductNotFoundException.java	(revision 04ecce6cfecf2e723bc23c6436371351a63af691)
+++ c4-samples/src/main/java/aut/utcluj/isp/ex4/ProductNotFoundException.java	(date 1590002695875)
@@ -4,4 +4,7 @@
  * @author stefan
  */
 public class ProductNotFoundException extends Exception {
+    public ProductNotFoundException(String message) {
+        super(message);
+    }
 }
Index: c4-samples/src/main/java/aut/utcluj/isp/ex4/UserCart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package aut.utcluj.isp.ex4;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport java.util.List;\r\n\r\n\r\n/**\r\n * @author stefan\r\n */\r\npublic class UserCart {\r\n    private List<Product> cardProducts = new ArrayList<>();\r\n    private double totalPrice;\r\n\r\n    public double getTotalPrice() {\r\n        return totalPrice;\r\n    }\r\n\r\n    public List<Product> getCardProducts() {\r\n        return cardProducts;\r\n    }\r\n\r\n    public UserCart() {\r\n        this.cardProducts = new ArrayList<>();\r\n        this.totalPrice = 0;\r\n    }\r\n\r\n    /**\r\n     * Add new product to user cart\r\n     *\r\n     * @param product  - product to be added\r\n     * @param quantity - number of products of the same type to be added\r\n     */\r\n    public void addProductToCart(final Product product, int quantity) {\r\n        for (int i = 0; i < quantity; i++) {\r\n            cardProducts.add(product);\r\n            totalPrice = totalPrice + product.getPrice();\r\n        }\r\n        // totalPrice = totalPrice + product.getPrice() * quantity;\r\n    }\r\n\r\n    /**\r\n     * Remove one product with product id from cart\r\n     * If the product with desired id not found in the card, an {@link ProductNotFoundException} exception will be thrown\r\n     *\r\n     * @param productId - unique product id\r\n     */\r\n    public void removeProductFromCart(final String productId) {\r\n        try {\r\n            tryRemovingProduct(productId);\r\n        } catch (ProductNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void tryRemovingProduct(final String productID) throws ProductNotFoundException {\r\n        boolean found = false;\r\n        for (Product product : cardProducts) {\r\n            if (product.getProductId().equals(productID)) {\r\n                cardProducts.remove(product);\r\n                totalPrice -=product.getPrice();\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            throw new ProductNotFoundException();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Reset user cart\r\n     * Reset products and total price to default values\r\n     */\r\n    public void resetCart() {\r\n        this.totalPrice = 0;\r\n        this.cardProducts = new ArrayList<>();\r\n    }\r\n\r\n    public void setTotalPrice(double totalPrice) {\r\n        this.totalPrice = totalPrice;\r\n    }\r\n\r\n    public void setCardProducts(List<Product> cardProducts) {\r\n        this.cardProducts = cardProducts;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- c4-samples/src/main/java/aut/utcluj/isp/ex4/UserCart.java	(revision 04ecce6cfecf2e723bc23c6436371351a63af691)
+++ c4-samples/src/main/java/aut/utcluj/isp/ex4/UserCart.java	(date 1590003389718)
@@ -1,16 +1,15 @@
 package aut.utcluj.isp.ex4;
 
-import java.util.ArrayList;
-
-import java.util.List;
-
+import java.util.*;
 
 /**
  * @author stefan
  */
-public class UserCart {
-    private List<Product> cardProducts = new ArrayList<>();
+public class UserCart implements ICartDetails  {
+    private List<Product> cardProducts;
     private double totalPrice;
+    boolean found = false;
+
 
     public double getTotalPrice() {
         return totalPrice;
@@ -48,23 +47,26 @@
     public void removeProductFromCart(final String productId) {
         try {
             tryRemovingProduct(productId);
+            System.out.println("product removed");
         } catch (ProductNotFoundException e) {
             e.printStackTrace();
+            System.out.println("exceptie prinsa");
         }
     }
 
     public void tryRemovingProduct(final String productID) throws ProductNotFoundException {
-        boolean found = false;
+
         for (Product product : cardProducts) {
             if (product.getProductId().equals(productID)) {
                 cardProducts.remove(product);
-                totalPrice -=product.getPrice();
+                totalPrice -= product.getPrice();
                 found = true;
-                break;
+                //break;
             }
         }
         if (!found) {
-            throw new ProductNotFoundException();
+            System.out.println("trebuie sa arunce");
+            throw new ProductNotFoundException("exceptie aruncata");
         }
     }
 
@@ -85,4 +87,15 @@
     public void setCardProducts(List<Product> cardProducts) {
         this.cardProducts = cardProducts;
     }
-}
+
+    @Override
+    public String getCartDetails() {
+        String mesaj = "";
+        Set<Product> set = new HashSet<>(cardProducts);
+        for (Product product : set) {
+            mesaj = mesaj + "Product id: " + product.getProductId() + ", Items: " + Collections.frequency(cardProducts, product) + "\n";
+        }
+        return mesaj + "Total price: " + totalPrice;
+    }
+
+}
\ No newline at end of file
Index: c4-samples/src/main/java/aut/utcluj/isp/ex3/StockController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package aut.utcluj.isp.ex3;\r\n\r\nimport java.util.*;\r\n\r\n/**\r\n * @author stefan\r\n */\r\npublic class StockController {\r\n    private Map<String, List<Product>> catalogue;\r\n\r\n    public StockController() {\r\n        this.catalogue = new HashMap<>();\r\n    }\r\n\r\n    public StockController(Map<String, List<Product>> catalogue) {\r\n        this.catalogue = catalogue;\r\n    }\r\n\r\n\r\n    /**\r\n     * Add product to catalogue\r\n     *\r\n     * @param product  - product information\r\n     * @param quantity - number of times the product should be added\r\n     * @apiNote: if products with the same products id already exists, assume that @param product has the same data\r\n     */\r\n    public void addProductToCatalogue(final Product product, final int quantity) {\r\n        List<Product> products = new ArrayList<>();\r\n\r\n        for (int i = 0; i < quantity; i++) {\r\n            products.add(product);\r\n        }\r\n\r\n        catalogue.put(product.getId(), products);\r\n    }\r\n\r\n    /**\r\n     * Return catalogue information\r\n     *\r\n     * @return dictionary where the key is the product id and the value is an array of products with the same id\r\n     */\r\n    public Map<String, List<Product>> getCatalogue() {\r\n        return catalogue;\r\n    }\r\n\r\n    /**\r\n     * Return all the products with particular id\r\n     *\r\n     * @param productId - unique product id\r\n     * @return - list of existing products with same id or null if not found\r\n     */\r\n    public List<Product> getProductsWithSameId(final String productId) {\r\n        List<Product> products = new ArrayList<>();\r\n        products = null;\r\n        for (List<Product> list : catalogue.values()) {\r\n            for (Product product : list) {\r\n                if (product.getId().equals(productId)) {\r\n                    products = list;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return products;\r\n    }\r\n\r\n    /**\r\n     * Get total number of products from catalogue\r\n     *\r\n     * @return\r\n     */\r\n    public int getTotalNumberOfProducts() {\r\n        int total = 0;\r\n        for (List<Product> list : catalogue.values()) {\r\n            total += list.size();\r\n        }\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * Remove all products with same product id\r\n     *\r\n     * @param productId - unique product id\r\n     * @return true if at least one product was deleted or false instead\r\n     */\r\n    public boolean removeAllProductsWitProductId(final String productId) {\r\n        for (List<Product> list : catalogue.values()) {\r\n            for (Product product : list) {\r\n                if (product.getId().equals(productId)) {\r\n                    for (Object o : catalogue.keySet()) {\r\n                        if (catalogue.get(o).equals(list)) {\r\n                            catalogue.remove(o);\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Update the price for all the products with same product id\r\n     *\r\n     * @param productId - unique product id\r\n     * @param price     - new price to be added\r\n     * @return true if at least one product was updated or false instead\r\n     */\r\n    public boolean updateProductPriceByProductId(final String productId, final Double price) {\r\n        for (List<Product> list : catalogue.values()) {\r\n            for (Product product : list) {\r\n                if (product.getId().equals(productId)) {\r\n                    product.setPrice(price);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- c4-samples/src/main/java/aut/utcluj/isp/ex3/StockController.java	(revision 04ecce6cfecf2e723bc23c6436371351a63af691)
+++ c4-samples/src/main/java/aut/utcluj/isp/ex3/StockController.java	(date 1590001606848)
@@ -6,6 +6,7 @@
  * @author stefan
  */
 public class StockController {
+
     private Map<String, List<Product>> catalogue;
 
     public StockController() {
