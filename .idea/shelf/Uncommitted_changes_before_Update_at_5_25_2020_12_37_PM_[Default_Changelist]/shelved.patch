Index: c4-samples/src/main/java/aut/utcluj/isp/ex3/StockController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package aut.utcluj.isp.ex3;\r\n\r\nimport java.util.*;\r\n\r\n/**\r\n * @author stefan\r\n */\r\npublic class StockController {\r\n    private Map<String, List<Product>> catalogue;\r\n\r\n    public StockController() {\r\n        this.catalogue = new HashMap<>();\r\n    }\r\n\r\n    public StockController(Map<String, List<Product>> catalogue) {\r\n        this.catalogue = catalogue;\r\n    }\r\n\r\n\r\n    /**\r\n     * Add product to catalogue\r\n     *\r\n     * @param product  - product information\r\n     * @param quantity - number of times the product should be added\r\n     * @apiNote: if products with the same products id already exists, assume that @param product has the same data\r\n     */\r\n    public void addProductToCatalogue(final Product product, final int quantity) {\r\n        List<Product> products = new ArrayList<>();\r\n\r\n        for (int i = 0; i < quantity; i++) {\r\n            products.add(product);\r\n        }\r\n\r\n        catalogue.put(product.getId(), products);\r\n    }\r\n\r\n    /**\r\n     * Return catalogue information\r\n     *\r\n     * @return dictionary where the key is the product id and the value is an array of products with the same id\r\n     */\r\n    public Map<String, List<Product>> getCatalogue() {\r\n        return catalogue;\r\n    }\r\n\r\n    /**\r\n     * Return all the products with particular id\r\n     *\r\n     * @param productId - unique product id\r\n     * @return - list of existing products with same id or null if not found\r\n     */\r\n    public List<Product> getProductsWithSameId(final String productId) {\r\n        List<Product> products = new ArrayList<>();\r\n        products = null;\r\n        for (List<Product> list : catalogue.values()) {\r\n            for (Product product : list) {\r\n                if (product.getId().equals(productId)) {\r\n                    products = list;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return products;\r\n    }\r\n\r\n    /**\r\n     * Get total number of products from catalogue\r\n     *\r\n     * @return\r\n     */\r\n    public int getTotalNumberOfProducts() {\r\n        int total = 0;\r\n        for (List<Product> list : catalogue.values()) {\r\n            total += list.size();\r\n        }\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * Remove all products with same product id\r\n     *\r\n     * @param productId - unique product id\r\n     * @return true if at least one product was deleted or false instead\r\n     */\r\n    public boolean removeAllProductsWitProductId(final String productId) {\r\n        for (List<Product> list : catalogue.values()) {\r\n            for (Product product : list) {\r\n                if (product.getId().equals(productId)) {\r\n                    for (Object o : catalogue.keySet()) {\r\n                        if (catalogue.get(o).equals(list)) {\r\n                            catalogue.remove(o);\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Update the price for all the products with same product id\r\n     *\r\n     * @param productId - unique product id\r\n     * @param price     - new price to be added\r\n     * @return true if at least one product was updated or false instead\r\n     */\r\n    public boolean updateProductPriceByProductId(final String productId, final Double price) {\r\n        for (List<Product> list : catalogue.values()) {\r\n            for (Product product : list) {\r\n                if (product.getId().equals(productId)) {\r\n                    product.setPrice(price);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- c4-samples/src/main/java/aut/utcluj/isp/ex3/StockController.java	(revision ffbb7992c2df4af0e1ce56bcf7c24a1d52ee9ea6)
+++ c4-samples/src/main/java/aut/utcluj/isp/ex3/StockController.java	(date 1590345565656)
@@ -6,6 +6,7 @@
  * @author stefan
  */
 public class StockController {
+
     private Map<String, List<Product>> catalogue;
 
     public StockController() {
Index: c4-samples/src/main/java/aut/utcluj/isp/ex4/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package aut.utcluj.isp.ex4;\r\n\r\nimport javax.jws.soap.SOAPBinding;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author stefan\r\n */\r\npublic class User {\r\n    private UserCart userCart;\r\n    private Double userMoney;\r\n\r\n    public User(Double userMoney) {\r\n        this.userMoney = userMoney;\r\n        userCart = new UserCart();\r\n    }\r\n\r\n    public UserCart getUserCart() {\r\n        return userCart;\r\n    }\r\n\r\n    public Double getUserMoney() {\r\n        return userMoney;\r\n    }\r\n\r\n    public void setUserCart(UserCart userCart) {\r\n        this.userCart = userCart;\r\n    }\r\n\r\n    public void setUserMoney(Double userMoney) {\r\n        this.userMoney = userMoney;\r\n    }\r\n\r\n    /**\r\n     * Add product to the cart\r\n     *\r\n     * @param product  - product to be added\r\n     * @param quantity - quantity to be added\r\n     */\r\n    public void addProductToCart(Product product, int quantity) {\r\n        userCart.addProductToCart(product, quantity);\r\n    }\r\n\r\n    /**\r\n     * Remove product from cart\r\n     * An {@link ProductNotFoundException} exception should be thrown if no product with desired productId is found\r\n     *\r\n     * @param productId - unique product id\r\n     */\r\n    public void removeProductFromCart(final String productId) throws ProductNotFoundException {\r\n\r\n            userCart.removeProductFromCart(productId);\r\n        }\r\n\r\n\r\n//   public void tryRemovingProduct(final String productID) throws ProductNotFoundException {\r\n//       /* boolean found = false;\r\n//        for (Product product : userCart.getCardProducts()) {\r\n//            if (product.getProductId().equals(productID)) {\r\n//                userCart.removeProductFromCart(productID);\r\n//                found = true;\r\n//            }\r\n//        }\r\n//        if (!found) {\r\n//            throw new ProductNotFoundException();\r\n//        }*/\r\n//       {\r\n//           userCart.removeProductFromCart(productID);\r\n//       }\r\n//    }\r\n\r\n\r\n    /**\r\n     * Submit cart details\r\n     * Total price of the products should be extracted from userMoney\r\n     * If userMoney is less than total price of the products, an {@link NotEnoughMoneyException} exception will be thrown\r\n     * If userMoney is greater or equal to the total price of the products, total price should be extracted from total money and cart to be reset to default values\r\n     */\r\n    public void submitCart() throws NotEnoughMoneyException {\r\n\r\n            removeMoney();\r\n    }\r\n\r\n    public void removeMoney() throws NotEnoughMoneyException {\r\n        if (userMoney < userCart.getTotalPrice()) {\r\n            throw new NotEnoughMoneyException();\r\n        } else {\r\n            userMoney -= userCart.getTotalPrice();\r\n            userCart.resetCart();\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- c4-samples/src/main/java/aut/utcluj/isp/ex4/User.java	(revision ffbb7992c2df4af0e1ce56bcf7c24a1d52ee9ea6)
+++ c4-samples/src/main/java/aut/utcluj/isp/ex4/User.java	(date 1590345543913)
@@ -90,5 +90,4 @@
             userCart.resetCart();
         }
     }
-}
-
+}
\ No newline at end of file
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_5_20_2020_11_58_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_5_20_2020_11_58_AM__Default_Changelist_.xml
